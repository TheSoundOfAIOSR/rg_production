
<BlackKnob@Knob>:
    size: dp(80), dp(80)
    min: 0
    max: 1
    value: 0
    knobimg_source: "assets/black_knob.png"
    show_label: True  # Show central label
    show_marker: False  # Do not show surrounding marker

    Label:
        text: "{}".format(round(self.parent.value, 1))
        center: self.parent.center
        font_size: 20
        color: 1, 1, 1, 1

<KnobLayout@GridLayout>:
    rows: 2
    size: dp(160), dp(100)
    spacing: [0, 50]

    BlackKnob:
        id: volume
        value: 0.9
        on_touch_move: app.csound.set_master_volume(self.value*self.value)
        on_touch_down: app.csound.set_master_volume(self.value*self.value)
    Label:
        text:"Volume"
        color: 1,1,1,1

    BlackKnob:
        id: panning
        value: 0.5
        on_touch_move: app.csound.set_panning(self.value)
        on_touch_down: app.csound.set_panning(self.value)
    Label:
        text:"Pan"
        color: 1,1,1,1

<Graphics>:

    message_label: lab
    playing_midi: False

    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'assets/background.png'

    ToggleButton:
        size: dp(100), dp(100)
        pos: dp(20), dp(480)
        border: (0, 0, 0, 0)
        id: record
        on_press: app.sm.dispatch('on_pipeline_action', {'action': 'user_action_toggle_record'})
        background_normal: 'assets/record_off.png'
        background_down: 'assets/record_on.png'
    
    SliderLayout:
        id: some_slider
        sliders: 16
        pos: dp(150), dp(490)
        size: dp(200), dp(100)
        
    GridLayout:
        cols: 8
        pos: dp(150), dp(430)
        size: dp(200), dp(100)
        Label:
            text: "a"
        Label:
            text: "b"
        Label:
            text: "c"
        Label:
            text: "d"
        Label:
            text: "e"
        Label:
            text: "f"
        Label:
            text: "g"
        Label:
            text: "h"

    Button:
        id: generate
        text: 'Generate'
        pos: dp(380), dp(480)
        size: dp(100), dp(100)
        on_press: app.sm.dispatch('on_pipeline_action', {'action': 'user_action_generate'})

    Button:
        id: export
        text: 'Export'
        pos: dp(500), dp(480)
        size: dp(100), dp(100)
        on_press: lab.text = "Exporting"

    GridLayout:
        rows: 3
        pos: dp(620), dp(480)
        size: dp(160), dp(100)
        Spinner:
            name: "input"
            text: 'Audio Input'
            values: [in_dev["name"] for in_dev in app.devices["devices"]["input_list"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"input", "hint":self.text})

        Spinner:
            name: "output"
            text: 'Audio Output'
            values: [out_dev["name"] for out_dev in app.devices["devices"]["output_list"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"output", "hint":self.text})
        Spinner:
            name: "midi_input"
            text: 'Midi Input'
            values: [midi_in for midi_in in app.midi_devices["input"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"midi_input", "hint":self.text})

    Label:
        id: lab
        pos: dp(350), dp(384)
        text: ""
        color: .8,.8,.8,1
        font_size: 12

    Button:
        id: play
        text: 'play'
        pos: dp(20),dp(340)
        size: dp(100), dp(50)
        on_press:app.sm.dispatch('on_sampler_gui_action', 'play_sample')

    Button:
        id: playM
        text: 'Play Midi File'
        pos: dp(20),dp(290)
        size: dp(100), dp(50)
        on_press: app.sm.dispatch('on_sampler_gui_action', 'midi_loaded')

    Image:
        source: ''
        pos: dp(150), dp(280)
        size: self.texture_size

    KnobLayout:
        pos:  dp(20), dp(170)