<Graphics>:

    message_label: lab
    playing_midi: False

    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'assets/background.png'

    Button:
        size: dp(100), dp(100)
        size_hint: None, None
        pos: dp(681), dp(290)
        text: 'Goto settings'
        on_press:
            root.manager.current = 'settings'
            root.manager.transition.direction = 'left'

    ToggleButton:
        size: dp(100), dp(100)
        size_hint: None, None
        pos: dp(20), dp(480)
        border: (0, 0, 0, 0)
        id: record
        on_press: app.sm.dispatch('on_pipeline_action', {'action': 'user_action_toggle_record'})
        background_normal: 'assets/record_off.png'
        background_down: 'assets/record_on.png'
    
    SliderLayout:
        id: some_slider
        sliders: 16
        pos: dp(150), dp(450)
        size: dp(500), dp(150)
        size_hint: None, None

    LabelLayout:
        id: some_label
        labels: 16
        pos: dp(150), dp(430)
        size: dp(200), dp(100)
        size_hint: None, None

    Button:
        id: generate
        text: 'Generate'
        pos: dp(680), dp(480)
        size: dp(100), dp(100)
        size_hint: None, None
        on_press: app.sm.dispatch('on_pipeline_action', {'action': 'user_action_generate'})

    Label:
        id: lab
        pos: dp(350), dp(384)
        text: ""
        color: .8,.8,.8,1
        font_size: sp(18)
        size_hint: None, None

    Button:
        id: play
        text: 'play'
        pos: dp(20),dp(340)
        size: dp(100), dp(50)
        size_hint: None, None
        on_press:app.sm.dispatch('on_sampler_gui_action', 'play_sample')

    Button:
        id: playM
        text: 'Play Midi'
        pos: dp(20),dp(290)
        size: dp(100), dp(50)
        size_hint: None, None
        on_press: app.sm.dispatch('on_sampler_gui_action', 'midi_loaded')

    Image:
        source: ''
        pos: dp(150), dp(280)
        size: self.texture_size
        size_hint: None, None

    Slider:
        id: volume_slider
        orientation: "vertical"
        min: 0
        max: 1
        value: 0.8
        on_touch_move: app.csound.set_master_volume(self.value)
        on_touch_down: app.csound.set_master_volume(self.value)
        pos: dp(60), dp(80)
        size: dp(10), dp(200)
        size_hint: None, None

    Label:
        text: "Volume"
        font_size: sp(15)
        color: 1, 1, 1, 1
        pos: dp(12), dp(0)
        size_hint: None, None

    Slider:
        id: pan_slider
        orientation: "vertical"
        min: 0
        max: 1
        value: 0.5
        on_touch_move: app.csound.set_panning(self.value)
        on_touch_down: app.csound.set_panning(self.value)
        pos: dp(140), dp(80)
        size: dp(10), dp(200)
        size_hint: None, None

    Label:
        text: "Pan"
        font_size: sp(15)
        color: 1, 1, 1, 1
        pos: dp(100), dp(0)
        size_hint: None, None

    KeyboardWidget:
        id: some_keys
        keys: 14
        pos: dp(220), dp(50)
        size: dp(180), dp(200)
        size_hint: None, None

    Switch:
        id: switch
        pos: dp(680), dp(200)
        size_hint: None, None
        on_active: app.sm.dispatch('on_switch', self, self.active)

<Settings>:

    canvas.before:
        Rectangle:
            pos: self.pos
            size: self.size
            source: 'assets/background.png'

    Button:
        size: dp(100), dp(100)
        size_hint: None, None
        pos: dp(350), dp(80)
        text: 'Back to menu'
        on_press:
            root.manager.current = 'graphics'
            root.manager.transition.direction = 'right'

    Button:
        id: export
        text: 'Export'
        pos: dp(350), dp(200)
        size: dp(100), dp(100)
        size_hint: None, None
        on_press: lab.text = "Exporting"

    GridLayout:
        rows: 6
        pos: dp(100), dp(380)
        size: dp(600), dp(200)
        size_hint: None, None
        Spinner:
            name: "input"
            text: 'Audio Input'
            values: [in_dev["name"] for in_dev in app.devices["devices"]["input_list"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"input", "hint":self.text})

        Spinner:
            name: "output"
            text: 'Audio Output'
            values: [out_dev["name"] for out_dev in app.devices["devices"]["output_list"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"output", "hint":self.text})

        Spinner:
            name: "midi_input"
            text: 'Midi Input'
            values: [midi_in for midi_in in app.midi_devices["input"]]
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"midi_input", "hint":self.text})

        Spinner:
            name: "hwd_buffer"
            text: 'Hardware Buffer'
            values: ['1024', '2048', '4096', '8192', '16384']
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"hwd_buffer", "hint":self.text})

        Spinner:
            name: "sfw_buffer"
            text: 'Software Buffer'
            values: ['64', '256', '512', '1024', '2048', '4096']
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"sfw_buffer", "hint":self.text})

        Spinner:
            name: "samp_rate"
            text: 'Sample Rate'
            values: ['44100', '48000']
            on_text:
                print(f"The spinner {self} has text {self.text}")
                app.sm.dispatch('on_update_io', {"type":"samp_rate", "hint":self.text})